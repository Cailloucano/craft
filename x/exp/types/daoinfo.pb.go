// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: craft/exp/v1beta1/daoinfo.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccountRecord struct {
	Account     string      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	MaxToken    *types.Coin `protobuf:"bytes,2,opt,name=max_token,json=maxToken,proto3" json:"max_token,omitempty"`
	JoinDaoTime time.Time   `protobuf:"bytes,3,opt,name=join_dao_time,json=joinDaoTime,proto3,stdtime" json:"join_dao_time"`
}

func (m *AccountRecord) Reset()         { *m = AccountRecord{} }
func (m *AccountRecord) String() string { return proto.CompactTextString(m) }
func (*AccountRecord) ProtoMessage()    {}
func (*AccountRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb2da1562060605, []int{0}
}
func (m *AccountRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRecord.Merge(m, src)
}
func (m *AccountRecord) XXX_Size() int {
	return m.Size()
}
func (m *AccountRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRecord proto.InternalMessageInfo

func (m *AccountRecord) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountRecord) GetMaxToken() *types.Coin {
	if m != nil {
		return m.MaxToken
	}
	return nil
}

func (m *AccountRecord) GetJoinDaoTime() time.Time {
	if m != nil {
		return m.JoinDaoTime
	}
	return time.Time{}
}

type DaoAssetInfo struct {
	DaoTokenPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=dao_token_price,json=daoTokenPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dao_token_price"`
	AssetDao      []*AssetDao                            `protobuf:"bytes,3,rep,name=asset_dao,json=assetDao,proto3" json:"asset_dao,omitempty"`
}

func (m *DaoAssetInfo) Reset()         { *m = DaoAssetInfo{} }
func (m *DaoAssetInfo) String() string { return proto.CompactTextString(m) }
func (*DaoAssetInfo) ProtoMessage()    {}
func (*DaoAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb2da1562060605, []int{1}
}
func (m *DaoAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaoAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaoAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaoAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaoAssetInfo.Merge(m, src)
}
func (m *DaoAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *DaoAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DaoAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DaoAssetInfo proto.InternalMessageInfo

func (m *DaoAssetInfo) GetAssetDao() []*AssetDao {
	if m != nil {
		return m.AssetDao
	}
	return nil
}

type AssetDao struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AssetDao) Reset()         { *m = AssetDao{} }
func (m *AssetDao) String() string { return proto.CompactTextString(m) }
func (*AssetDao) ProtoMessage()    {}
func (*AssetDao) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fb2da1562060605, []int{2}
}
func (m *AssetDao) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetDao) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetDao.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetDao) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetDao.Merge(m, src)
}
func (m *AssetDao) XXX_Size() int {
	return m.Size()
}
func (m *AssetDao) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetDao.DiscardUnknown(m)
}

var xxx_messageInfo_AssetDao proto.InternalMessageInfo

func (m *AssetDao) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetDao) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountRecord)(nil), "craft.exp.v1beta1.AccountRecord")
	proto.RegisterType((*DaoAssetInfo)(nil), "craft.exp.v1beta1.DaoAssetInfo")
	proto.RegisterType((*AssetDao)(nil), "craft.exp.v1beta1.AssetDao")
}

func init() { proto.RegisterFile("craft/exp/v1beta1/daoinfo.proto", fileDescriptor_9fb2da1562060605) }

var fileDescriptor_9fb2da1562060605 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x04, 0x0e, 0x67, 0x43, 0x84, 0xb0, 0x4e, 0xc8, 0x17, 0x24, 0x3b, 0x8a, 0x04,
	0x4a, 0xc3, 0x5a, 0x77, 0x48, 0xe8, 0x44, 0x77, 0x21, 0x05, 0x74, 0xc8, 0x3a, 0x51, 0xd0, 0x58,
	0xe3, 0xf5, 0xc6, 0x98, 0xc3, 0x1e, 0xcb, 0xbb, 0x41, 0xe6, 0x0d, 0x28, 0xaf, 0xa4, 0xcc, 0x4b,
	0xf0, 0x0e, 0x57, 0x5e, 0x89, 0x28, 0x02, 0x4a, 0x5e, 0x04, 0xed, 0x1f, 0xd3, 0x50, 0x79, 0xbf,
	0xd9, 0x6f, 0x66, 0x7e, 0xfe, 0x6c, 0x1a, 0xf1, 0x16, 0xd6, 0x2a, 0x16, 0x5d, 0x13, 0x7f, 0x39,
	0xcd, 0x84, 0x82, 0xd3, 0x38, 0x07, 0x2c, 0xeb, 0x35, 0xb2, 0xa6, 0x45, 0x85, 0xfe, 0x23, 0x63,
	0x60, 0xa2, 0x6b, 0x98, 0x33, 0x4c, 0x4f, 0x38, 0xca, 0x0a, 0x65, 0x6a, 0x0c, 0xb1, 0x15, 0xd6,
	0x3d, 0x3d, 0x2e, 0xb0, 0x40, 0x5b, 0xd7, 0x27, 0x57, 0x0d, 0xad, 0x27, 0xce, 0x40, 0x8a, 0x7f,
	0x6b, 0x38, 0x96, 0xb5, 0xbb, 0x8f, 0x0a, 0xc4, 0xe2, 0xb3, 0x88, 0x8d, 0xca, 0x36, 0xeb, 0x58,
	0x95, 0x95, 0x90, 0x0a, 0xaa, 0xc6, 0x1a, 0xe6, 0x3f, 0x08, 0x9d, 0x5c, 0x70, 0x8e, 0x9b, 0x5a,
	0x25, 0x82, 0x63, 0x9b, 0xfb, 0x01, 0xbd, 0x0f, 0xb6, 0x10, 0x90, 0x19, 0x59, 0x8c, 0x92, 0x5e,
	0xfa, 0x2f, 0xe9, 0xa8, 0x82, 0x2e, 0x55, 0x78, 0x25, 0xea, 0xe0, 0xce, 0x8c, 0x2c, 0xc6, 0x67,
	0x27, 0xcc, 0x41, 0x6a, 0x80, 0xfe, 0x35, 0xd8, 0x6b, 0x2c, 0xeb, 0xc4, 0xab, 0xa0, 0xbb, 0xd4,
	0x56, 0xff, 0x0d, 0x9d, 0x7c, 0xc2, 0xb2, 0x4e, 0x73, 0xc0, 0x54, 0xef, 0x0f, 0x86, 0xa6, 0x77,
	0xca, 0x2c, 0x1c, 0xeb, 0xe1, 0xd8, 0x65, 0x0f, 0xb7, 0xf4, 0x6e, 0x76, 0xd1, 0xe0, 0xfa, 0x77,
	0x44, 0x92, 0xb1, 0x6e, 0x5d, 0x01, 0xea, 0xbb, 0x57, 0xde, 0xb7, 0x6d, 0x44, 0xbe, 0x6f, 0x23,
	0x32, 0xdf, 0x12, 0xfa, 0x60, 0x05, 0x78, 0x21, 0xa5, 0x50, 0x6f, 0xeb, 0x35, 0xfa, 0xef, 0xe9,
	0x43, 0x33, 0x5f, 0x6f, 0x4c, 0x9b, 0xb6, 0xe4, 0xc2, 0x20, 0x8e, 0x96, 0x4c, 0x8f, 0xfa, 0xb5,
	0x8b, 0x9e, 0x15, 0xa5, 0xfa, 0xb8, 0xc9, 0x18, 0xc7, 0xca, 0x25, 0xeb, 0x1e, 0xcf, 0x65, 0x7e,
	0x15, 0xab, 0xaf, 0x8d, 0x90, 0x6c, 0x25, 0x78, 0x32, 0xc9, 0x01, 0x0d, 0xf7, 0x3b, 0x3d, 0xc4,
	0x3f, 0xa7, 0x23, 0xd0, 0x4b, 0x34, 0x7d, 0x30, 0x9c, 0x0d, 0x17, 0xe3, 0xb3, 0x27, 0xec, 0xbf,
	0x2f, 0xc7, 0x0c, 0xc8, 0x0a, 0x30, 0xf1, 0xc0, 0x9d, 0xe6, 0xe7, 0xd4, 0xeb, 0xab, 0xfe, 0x31,
	0xbd, 0x97, 0x8b, 0x1a, 0x2b, 0x17, 0xa9, 0x15, 0xfe, 0x63, 0x7a, 0x04, 0x95, 0x49, 0x5a, 0xa3,
	0xde, 0x4d, 0x9c, 0x5a, 0x3e, 0xbd, 0xd9, 0x87, 0xe4, 0x76, 0x1f, 0x92, 0x3f, 0xfb, 0x90, 0x5c,
	0x1f, 0xc2, 0xc1, 0xed, 0x21, 0x1c, 0xfc, 0x3c, 0x84, 0x83, 0x0f, 0xe3, 0xce, 0xfc, 0x50, 0x86,
	0x36, 0x3b, 0x32, 0xc1, 0xbd, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xff, 0x32, 0xc1, 0x6a,
	0x02, 0x00, 0x00,
}

func (m *AccountRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.JoinDaoTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.JoinDaoTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDaoinfo(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.MaxToken != nil {
		{
			size, err := m.MaxToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaoinfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintDaoinfo(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DaoAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaoAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaoAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetDao) > 0 {
		for iNdEx := len(m.AssetDao) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetDao[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDaoinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.DaoTokenPrice.Size()
		i -= size
		if _, err := m.DaoTokenPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDaoinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *AssetDao) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetDao) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetDao) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintDaoinfo(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDaoinfo(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDaoinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovDaoinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovDaoinfo(uint64(l))
	}
	if m.MaxToken != nil {
		l = m.MaxToken.Size()
		n += 1 + l + sovDaoinfo(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.JoinDaoTime)
	n += 1 + l + sovDaoinfo(uint64(l))
	return n
}

func (m *DaoAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DaoTokenPrice.Size()
	n += 1 + l + sovDaoinfo(uint64(l))
	if len(m.AssetDao) > 0 {
		for _, e := range m.AssetDao {
			l = e.Size()
			n += 1 + l + sovDaoinfo(uint64(l))
		}
	}
	return n
}

func (m *AssetDao) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDaoinfo(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovDaoinfo(uint64(m.Amount))
	}
	return n
}

func sovDaoinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDaoinfo(x uint64) (n int) {
	return sovDaoinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaoinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxToken == nil {
				m.MaxToken = &types.Coin{}
			}
			if err := m.MaxToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinDaoTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.JoinDaoTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaoinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaoAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaoinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaoAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaoAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoTokenPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoTokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDao", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDao = append(m.AssetDao, &AssetDao{})
			if err := m.AssetDao[len(m.AssetDao)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaoinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetDao) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaoinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetDao: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetDao: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaoinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDaoinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaoinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDaoinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDaoinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaoinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDaoinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDaoinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDaoinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDaoinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDaoinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDaoinfo = fmt.Errorf("proto: unexpected end of group")
)
