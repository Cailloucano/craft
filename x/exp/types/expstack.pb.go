// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: craft/exp/v1beta1/expstack.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ModuleAccount defines an account for modules that holds coins on a pool.
type BurnRequest struct {
	Account  string      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	MaxToken *types.Coin `protobuf:"bytes,2,opt,name=max_token,json=maxToken,proto3" json:"max_token,omitempty"`
}

func (m *BurnRequest) Reset()         { *m = BurnRequest{} }
func (m *BurnRequest) String() string { return proto.CompactTextString(m) }
func (*BurnRequest) ProtoMessage()    {}
func (*BurnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_644661324da98abd, []int{0}
}
func (m *BurnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnRequest.Merge(m, src)
}
func (m *BurnRequest) XXX_Size() int {
	return m.Size()
}
func (m *BurnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BurnRequest proto.InternalMessageInfo

func (m *BurnRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BurnRequest) GetMaxToken() *types.Coin {
	if m != nil {
		return m.MaxToken
	}
	return nil
}

type MintRequest struct {
	Account         string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	GovId           uint32 `protobuf:"varint,2,opt,name=gov_id,json=govId,proto3" json:"gov_id,omitempty"`
	DaoTokenMint    uint64 `protobuf:"varint,3,opt,name=dao_token_mint,json=daoTokenMint,proto3" json:"dao_token_mint,omitempty"`
	StableTokenLeft uint64 `protobuf:"varint,4,opt,name=stable_token_left,json=stableTokenLeft,proto3" json:"stable_token_left,omitempty"`
}

func (m *MintRequest) Reset()         { *m = MintRequest{} }
func (m *MintRequest) String() string { return proto.CompactTextString(m) }
func (*MintRequest) ProtoMessage()    {}
func (*MintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_644661324da98abd, []int{1}
}
func (m *MintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintRequest.Merge(m, src)
}
func (m *MintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintRequest proto.InternalMessageInfo

func (m *MintRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MintRequest) GetGovId() uint32 {
	if m != nil {
		return m.GovId
	}
	return 0
}

func (m *MintRequest) GetDaoTokenMint() uint64 {
	if m != nil {
		return m.DaoTokenMint
	}
	return 0
}

func (m *MintRequest) GetStableTokenLeft() uint64 {
	if m != nil {
		return m.StableTokenLeft
	}
	return 0
}

type RequestList struct {
	MintRequestList []*MintRequest `protobuf:"bytes,1,rep,name=mint_request_list,json=mintRequestList,proto3" json:"mint_request_list,omitempty" yaml:"mint_request_list"`
	BurnRequestList []*BurnRequest `protobuf:"bytes,2,rep,name=burn_request_list,json=burnRequestList,proto3" json:"burn_request_list,omitempty" yaml:"burn_request_list"`
}

func (m *RequestList) Reset()         { *m = RequestList{} }
func (m *RequestList) String() string { return proto.CompactTextString(m) }
func (*RequestList) ProtoMessage()    {}
func (*RequestList) Descriptor() ([]byte, []int) {
	return fileDescriptor_644661324da98abd, []int{2}
}
func (m *RequestList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestList.Merge(m, src)
}
func (m *RequestList) XXX_Size() int {
	return m.Size()
}
func (m *RequestList) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestList.DiscardUnknown(m)
}

var xxx_messageInfo_RequestList proto.InternalMessageInfo

func (m *RequestList) GetMintRequestList() []*MintRequest {
	if m != nil {
		return m.MintRequestList
	}
	return nil
}

func (m *RequestList) GetBurnRequestList() []*BurnRequest {
	if m != nil {
		return m.BurnRequestList
	}
	return nil
}

func init() {
	proto.RegisterType((*BurnRequest)(nil), "craft.exp.v1beta1.BurnRequest")
	proto.RegisterType((*MintRequest)(nil), "craft.exp.v1beta1.MintRequest")
	proto.RegisterType((*RequestList)(nil), "craft.exp.v1beta1.RequestList")
}

func init() { proto.RegisterFile("craft/exp/v1beta1/expstack.proto", fileDescriptor_644661324da98abd) }

var fileDescriptor_644661324da98abd = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x6d, 0x29, 0xed, 0x19, 0x88, 0x62, 0x81, 0xe4, 0x56, 0xc8, 0x89, 0x2c, 0x90,
	0x22, 0x06, 0x5b, 0x2d, 0x12, 0x43, 0xc7, 0x30, 0x21, 0x95, 0xc5, 0x62, 0x62, 0xb1, 0xce, 0xce,
	0xc5, 0x9c, 0x6a, 0xdf, 0x33, 0xbe, 0xe7, 0xc8, 0xfd, 0x06, 0x8c, 0x8c, 0x88, 0xa9, 0x1f, 0x87,
	0xb1, 0x23, 0x13, 0x82, 0xe4, 0x1b, 0xf0, 0x09, 0xd0, 0xdd, 0x39, 0xc4, 0x28, 0x42, 0xdd, 0xee,
	0xbd, 0xfb, 0xe9, 0xfd, 0xfe, 0xa7, 0x7b, 0x74, 0x92, 0xd5, 0x6c, 0x81, 0x11, 0x6f, 0xab, 0x68,
	0x79, 0x96, 0x72, 0x64, 0x67, 0xfa, 0xac, 0x90, 0x65, 0x57, 0x61, 0x55, 0x03, 0x82, 0x3b, 0x32,
	0x44, 0xc8, 0xdb, 0x2a, 0xec, 0x88, 0xd3, 0x93, 0x0c, 0x54, 0x09, 0x2a, 0x31, 0x40, 0x64, 0x0b,
	0x4b, 0x9f, 0x3e, 0xce, 0x21, 0x07, 0xdb, 0xd7, 0xa7, 0xae, 0xeb, 0x5b, 0x26, 0x4a, 0x99, 0xe2,
	0x7f, 0x3d, 0x19, 0x08, 0xd9, 0xdd, 0x8f, 0x73, 0x80, 0xbc, 0xe0, 0x91, 0xa9, 0xd2, 0x66, 0x11,
	0xa1, 0x28, 0xb9, 0x42, 0x56, 0x56, 0x16, 0x08, 0x04, 0x75, 0x66, 0x4d, 0x2d, 0x63, 0xfe, 0xb1,
	0xe1, 0x0a, 0x5d, 0x8f, 0xde, 0x67, 0x59, 0x06, 0x8d, 0x44, 0x8f, 0x4c, 0xc8, 0xf4, 0x38, 0xde,
	0x94, 0xee, 0x2b, 0x7a, 0x5c, 0xb2, 0x36, 0x41, 0xb8, 0xe2, 0xd2, 0xdb, 0x9b, 0x90, 0xa9, 0x73,
	0x7e, 0x12, 0x76, 0x09, 0xb5, 0x7d, 0xf3, 0x86, 0xf0, 0x35, 0x08, 0x19, 0x1f, 0x95, 0xac, 0x7d,
	0xa7, 0xd1, 0x8b, 0xa3, 0x4f, 0x37, 0x63, 0xf2, 0xe5, 0x66, 0x4c, 0x82, 0xaf, 0x84, 0x3a, 0x6f,
	0x85, 0xc4, 0xbb, 0x5d, 0x4f, 0xe8, 0x61, 0x0e, 0xcb, 0x44, 0xcc, 0x8d, 0xe8, 0x61, 0x7c, 0x2f,
	0x87, 0xe5, 0x9b, 0xb9, 0xfb, 0x8c, 0x3e, 0x9a, 0x33, 0xb0, 0x11, 0x92, 0x52, 0x48, 0xf4, 0xf6,
	0x27, 0x64, 0x7a, 0x10, 0x3f, 0x98, 0x33, 0x30, 0x32, 0x3d, 0xdd, 0x7d, 0x41, 0x47, 0x0a, 0x59,
	0x5a, 0xf0, 0x0e, 0x2c, 0xf8, 0x02, 0xbd, 0x03, 0x03, 0x0e, 0xed, 0x85, 0x61, 0x2f, 0xf9, 0x02,
	0x7b, 0xe1, 0x7e, 0x11, 0xea, 0x74, 0xc1, 0x2e, 0x85, 0x42, 0xf7, 0x03, 0x1d, 0x69, 0x43, 0x52,
	0xdb, 0x5e, 0x52, 0x08, 0xa5, 0x63, 0xee, 0x4f, 0x9d, 0x73, 0x3f, 0xdc, 0xf9, 0xb8, 0xb0, 0xf7,
	0xae, 0xd9, 0xd3, 0xdf, 0x3f, 0xc6, 0xde, 0x35, 0x2b, 0x8b, 0x8b, 0x60, 0x67, 0x44, 0x10, 0x0f,
	0xcb, 0x2d, 0xba, 0x31, 0xa5, 0x4d, 0x2d, 0xff, 0x35, 0xed, 0xfd, 0xd7, 0xd4, 0xfb, 0xad, 0xbe,
	0x69, 0x67, 0x44, 0x10, 0x0f, 0xd3, 0x2d, 0xaa, 0x4d, 0xb3, 0xe7, 0xdf, 0x56, 0x3e, 0xb9, 0x5d,
	0xf9, 0xe4, 0xe7, 0xca, 0x27, 0x9f, 0xd7, 0xfe, 0xe0, 0x76, 0xed, 0x0f, 0xbe, 0xaf, 0xfd, 0xc1,
	0x7b, 0xa7, 0x35, 0x8b, 0x8a, 0xd7, 0x15, 0x57, 0xe9, 0xa1, 0xd9, 0x8c, 0x97, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x99, 0x8d, 0x3b, 0x02, 0xc2, 0x02, 0x00, 0x00,
}

func (m *BurnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxToken != nil {
		{
			size, err := m.MaxToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpstack(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintExpstack(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableTokenLeft != 0 {
		i = encodeVarintExpstack(dAtA, i, uint64(m.StableTokenLeft))
		i--
		dAtA[i] = 0x20
	}
	if m.DaoTokenMint != 0 {
		i = encodeVarintExpstack(dAtA, i, uint64(m.DaoTokenMint))
		i--
		dAtA[i] = 0x18
	}
	if m.GovId != 0 {
		i = encodeVarintExpstack(dAtA, i, uint64(m.GovId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintExpstack(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnRequestList) > 0 {
		for iNdEx := len(m.BurnRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpstack(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MintRequestList) > 0 {
		for iNdEx := len(m.MintRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpstack(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpstack(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpstack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BurnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovExpstack(uint64(l))
	}
	if m.MaxToken != nil {
		l = m.MaxToken.Size()
		n += 1 + l + sovExpstack(uint64(l))
	}
	return n
}

func (m *MintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovExpstack(uint64(l))
	}
	if m.GovId != 0 {
		n += 1 + sovExpstack(uint64(m.GovId))
	}
	if m.DaoTokenMint != 0 {
		n += 1 + sovExpstack(uint64(m.DaoTokenMint))
	}
	if m.StableTokenLeft != 0 {
		n += 1 + sovExpstack(uint64(m.StableTokenLeft))
	}
	return n
}

func (m *RequestList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MintRequestList) > 0 {
		for _, e := range m.MintRequestList {
			l = e.Size()
			n += 1 + l + sovExpstack(uint64(l))
		}
	}
	if len(m.BurnRequestList) > 0 {
		for _, e := range m.BurnRequestList {
			l = e.Size()
			n += 1 + l + sovExpstack(uint64(l))
		}
	}
	return n
}

func sovExpstack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpstack(x uint64) (n int) {
	return sovExpstack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BurnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpstack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpstack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpstack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpstack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpstack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxToken == nil {
				m.MaxToken = &types.Coin{}
			}
			if err := m.MaxToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpstack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpstack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpstack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpstack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpstack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovId", wireType)
			}
			m.GovId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GovId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoTokenMint", wireType)
			}
			m.DaoTokenMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaoTokenMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableTokenLeft", wireType)
			}
			m.StableTokenLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StableTokenLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpstack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpstack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpstack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpstack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpstack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRequestList = append(m.MintRequestList, &MintRequest{})
			if err := m.MintRequestList[len(m.MintRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpstack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpstack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnRequestList = append(m.BurnRequestList, &BurnRequest{})
			if err := m.BurnRequestList[len(m.BurnRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpstack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpstack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpstack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpstack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpstack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpstack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpstack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpstack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpstack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpstack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpstack = fmt.Errorf("proto: unexpected end of group")
)
